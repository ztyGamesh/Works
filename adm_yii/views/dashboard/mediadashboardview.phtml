<!--广告主系统 账户报表界面-->
<?php
echo $this->renderFile('@app/views/layouts/listPublicHeader2.phtml');
echo $this->renderFile('@app/views/layouts/tablePublic.phtml');
?>
<link rel="stylesheet" href="/css/application/dashboard/clientdashboard.css?v=2">
<link rel="stylesheet" href="/css/application/dashboard/mediadashboard.css?v=20170509">
<script src="/js/utils/DLUtils.js?v=20170508" type="text/javascript"></script>

<!--日历插件-->
<div class="toolbar">
    <div class="container-fluid" style="margin: 20px 0;">
        <div class="row">
            <div class="form-inline" role="form">
                <div class="form-group pull-right">
                    <div class="input-group date dl-date-range-wrapper">
                        <input type="text" class="form-control dl-date-range-input" id="searchDate">
                        <span class="caret dl-date-range-input-icon"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!--显示汇总数据-->
<div class="all_data" id="sumData">
    <table class="tr_name">
        <tr>
            <th>日期</th>
            <th>总收入(元)</th>
            <th>总曝光量</th>
            <th>总点击量</th>
            <th>点击率</th>
            <th>eCPM(元)</th>
            <th>CPC(元)</th>
        </tr>
        <tr class="tr_now" id="topNow">
            <td info="time">-</td>
            <td info="income">-</td>
            <td info="imp">-</td>
            <td info="clk">-</td>
            <td info="ctr">-</td>
            <td info="ecpm">-</td>
            <td info="ecpc">-</td>
        </tr>
        <tr class="tr_before" id="topBefore">
            <td info="time">-</td>
            <td info="income">-</td>
            <td info="imp">-</td>
            <td info="clk">-</td>
            <td info="ctr">-</td>
            <td info="ecpm">-</td>
            <td info="ecpc">-</td>
        </tr>

    </table>
</div>
<!--折线图-->
<div id="echarsBox" style="width: 100%;height:400px;">
    <!--    这里插入折线图的html代码-->
    <!--折线图静态结构-->
    <div id="admEchart">
        <div id="main"></div>
    </div>
</div>

<!--表格及饼图-->
<div class='income_box' id="media_income_id">
    <!--表格-->
    <div class="income_table" style="margin-top: 0px;">
        <div class="income_table_title"><span id="now_keyWords">媒体收入</span> <span> <a style="visibility: hidden">更多详情>> </a>  </span></div>
        <div class="income_table_container">
            <table id="table_media" class="list-table" style="border: 0;"></table>
        </div>
    </div>

    <!--饼图-->
<!--    <div class="income_pie" style="float: right;">-->
<!--        <div class="chart_title"><span class="chart_title_top">媒体收入占比</span>-->
<!--        </div>-->
<!--        <div id="media_income" class="chart"></div>-->
<!--    </div>-->
</div>
<!--表格及饼图-->
<div class='income_box' id="ad_income_id">
    <!--表格-->
    <div class="income_table">
        <div class="income_table_title"><span id="now_keyWords">广告位收入</span> <span> <a style="visibility: hidden">更多详情>> </a>  </span></div>
        <div class="income_table_container">
            <table id="table_client" class="list-table" style="border: 0;"></table>
        </div>
    </div>

    <!--饼图-->
<!--    <div class="income_pie" style="float: right;">-->
<!--        <div class="chart_title"><span class="chart_title_top">广告位收入占比</span>-->
<!--        </div>-->
<!--        <div id="ad_income" class="chart"></div>-->
<!--    </div>-->
</div>

<!--柱状图-->
<div class="line_charts">
    <div class="chart_container" style="margin-left: 0px;">
        <div class="chart_title"><span class="chart_title_top">样式收入排行</span> <span class="chart_title_more"><a
                        href="#" style="visibility: hidden"> 更多详情>></a></span></div>
        <div id="baseTemplate_income" class="chart"></div>
    </div>
    <div class="chart_container" style="float: right;">
        <div class="chart_title"><span class="chart_title_top">样式点击率排行</span> <span class="chart_title_more"><a
                        href="#" style="visibility: hidden">更多详情>></a></span></div>
        <div id="baseTemplate_ctr" class="chart"></div>
    </div>

</div>


<?php
echo $this->renderFile('@app/views/layouts/bootstrapDaterangerpickerPublic.phtml');
?>
<!--日历插件-->
<script type="text/javascript">
    //计算对比时间
    function transfer(option) {
        //获取查询时间毫秒
        var curDateStart = new Date(option.start);
        var curDateEnd = new Date(option.end);
        var deltaTime;
        //如果是同一天
        if (option.start === option.end) {
            deltaTime = 3600 * 24 * 1000;
        } else {
            //计算查询时间的时间间隔
            deltaTime = curDateEnd.getTime() - curDateStart.getTime();
        }
        //计算上一个阶段的时间节点
        var prevDateStart = curDateStart.getTime() - deltaTime;
        var prevDateEnd = curDateEnd.getTime() - deltaTime;
        //将上一个阶段的时间节点转化为时间对象
        var preStart = new Date(prevDateStart);
        var preEnd = new Date(prevDateEnd);

        var preStartArr = [];
        var preEndArr = [];
        preStartArr[0] = preStart.getFullYear();
        preStartArr[1] = preStart.getMonth() + 1;
        preStartArr[2] = preStart.getDate();

        preEndArr[0] = preEnd.getFullYear();
        preEndArr[1] = preEnd.getMonth() + 1;
        preEndArr[2] = preEnd.getDate();

        //格式处理
        for (var i = 0; i < 3; i++) {
            preStartArr[i] = preStartArr[i].toString();
            preEndArr[i] = preEndArr[i].toString();
            if (preStartArr[i].length === 1) {
                preStartArr[i] = '0' + preStartArr[i];
            }
            if (preEndArr[i].length === 1) {
                preEndArr[i] = '0' + preEndArr[i];
            }
        }

        //将结果包装成对象
        return {
            start: preStartArr.join('/'),
            end: preEndArr.join('/')
        };
    }


    var myChart_template_income;
    var myChart_template_ctr;
    var myChart_pie_media;
    var myChart_pie_ad;
    var lastTime = new Object();
    var nowTime = {
        "start": moment().format('YYYY/MM/DD'),//刚进入页面时获取当前时间
        "end": moment().format('YYYY/MM/DD')
    };
    nowTime = transfer(nowTime); //当前时间设定为昨天
    lastTime = transfer(nowTime);//根据当前时间，获取前一天时间
    var mediasessiontimeStart = window.sessionStorage.getItem('mediasessiontimeStart');
    var mediasessiontimeEnd = window.sessionStorage.getItem('mediasessiontimeEnd');
    var mediasessiontimeLastStart = window.sessionStorage.getItem('mediasessiontimeLastStart');
    var mediasessiontimeLastEnd = window.sessionStorage.getItem('mediasessiontimeLastEnd');

    if(mediasessiontimeStart != null){
        nowTime.start = mediasessiontimeStart;
    }
    if(mediasessiontimeEnd != null){
        nowTime.end = mediasessiontimeEnd;
    }
    if(mediasessiontimeLastStart != null){
        lastTime.start = mediasessiontimeLastStart;
    }
    if(mediasessiontimeLastEnd != null){
        lastTime.end = mediasessiontimeLastEnd;
    }
    console.log('mediasessiontimeStart', nowTime);
    //--折线图start
    //展示导航栏数据
    function topRender(options, phase, time) {
        var show;
        if (phase) {
            //current
            show = document.getElementById('topNow');
        } else {
            //prev
            show = document.getElementById('topBefore');
        }
        if (!options) {
            for (var j = 0; j < show.children.length; j++) {
                show.children[j].innerHTML = '-';
            }
        }

        /*
        * 日期选择具体
        * */

        for (var j = 0; j < show.children.length; j++) {
            var info = show.children[j].getAttribute('info');
            if (info === 'time') {
                if(time.length <= 10 ){
                    // 不折行
                    // 字体大
                    show.children[j].innerHTML = time;
                    $($("#topNow").children()[0]).css("fontSize","20px");
                    $($("#topBefore").children()[0]).css("fontSize","12px");
                } else {
                    // 折行
                    // 字体小
                    var arr = time.split("至");
                    var str = arr[0]+ "至" + "<br>" + arr[1];
                    show.children[j].innerHTML = str;
                    $($("#topNow").children()[0]).css("fontSize","10px");
                    $($("#topBefore").children()[0]).css("fontSize","6px");
                }
            }
            for (var k in options) {
                if (k === info) {
                    show.children[j].innerHTML = options[k] || '-';
                }
                if (info === 'ctr') {
                    if (show.children[j].innerHTML.indexOf('%') === -1) {
                        show.children[j].innerHTML += '%';
                    }
                }
            }
        }
    }

    //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
    //自定义图例名称
    var arr = ['收入(元)', '曝光量', '点击量', '点击率', 'eCPM(元)', 'CPC(元)'];
    // 折线图
    var myChart = echarts.init(document.getElementById('main'), 'macarons');
    function render(arr) {
        //创建自定义图例
        var fragment = document.createDocumentFragment();
        var ul = document.createElement('ul');
        ul.id = 'data-list';
        var len = arr.length;
        arr.forEach(function (v, i) {
            var li = document.createElement('li');
            var a = document.createElement('a');
            a.className = 'item';
            a.innerHTML = v;
            a.title = v;
            a.index = i;
            if (i === len - 1) {
                li.style.borderRight = '0';
            }
            li.appendChild(a);
            ul.appendChild(li);
        })
        fragment.appendChild(ul);
        document.getElementById('admEchart').appendChild(fragment);
        //创建自定义时间展示块
        var timeModule = document.createDocumentFragment();
        var div = document.createElement('div');
        //自定义时间图例
        var fragmentTime = document.createDocumentFragment();
        var ulTime = document.createElement('ul');
        ulTime.className = 'timeModule';
        for (var t = 0; t < 2; t++) {
            var liTimeItem = document.createElement('li');
            //增加图例项目
            var legendLogo = document.createElement('div');
            liTimeItem.appendChild(legendLogo);
            //---//
            var liTimeText = document.createElement('span');
            liTimeText.innerHTML = dataCharts.data[t];
            liTimeText.className = 'timeLogo';
            liTimeItem.appendChild(liTimeText);
            ulTime.appendChild(liTimeItem);
        }
        ulTime.children[0].children[0].className = 'legendLeft';
        ulTime.children[1].children[0].className = 'legendRightF';
        ulTime.children[1]['id'] = 'timeCompare';
        ulTime.children[1]['checked'] = false;
        fragmentTime.appendChild(ulTime);
        document.getElementById('admEchart').appendChild(fragmentTime);
        var timeCompare = document.getElementById('timeCompare');
        //日期对比的控制
        timeCompare.addEventListener('click', function () {
            this['checked'] = !this['checked'];
            var searchArr = [];
            if (this['checked'] === true) {
                this.children[0].className = 'legendRightB';
                this.style.opacity = 1;
                items.forEach(function (v) {
                    if (v['checked'] === true) {
                        searchArr.push(v.children[0]['title']);
                    }
                })
                for (var i = 0; i < dataCharts.prevData.length; i++) {
                    for (var j = 0; j < searchArr.length; j++) {
                        if (dataCharts.prevData[i]['name'] === searchArr[j]) {
                            option.series.push(dataCharts.prevData[i]);
                        }
                    }
                }
                myChart.setOption(option);
            } else if (this['checked'] === false) {
                this.style.opacity = 0.6;
                this.children[0].className = 'legendRightF';
                myChart.clear();
                option.series.pop();
                option.series.pop();
                myChart.setOption(option);
            }

        })
        // 绑定点击事件
        var items = Array.prototype.slice.call(ul.children);
        items.temp = [];
        //颜色数组
        var colorArr = ['red', 'blue', 'orange', 'purple', 'pink', 'yellow'];
        items.forEach(function (v, i) {
            v['checked'] = false;
            // 给每个点击项固定一个颜色
            for (var j = 0; j < colorArr.length; j++) {
                if (j === i) {
                    v['color'] = colorArr[j];
                }
            }
            //给每个项添加点击事件
            v.addEventListener('click', function () {
                var flag = this.checked;
                items.temp = items.filter(function (v) {
                    return v['checked'] === true;
                })
                if (flag && items.temp.length === 1) {
                    return
                }
                this.checked = !this.checked;
                items.temp = items.filter(function (v) {
                    return v['checked'] === true;
                })
                if (items.temp.length > 2) {
//                    alert('filled');
                    //多选时候的弹出层
                    layer.msg('最多可选2个指标');
                    this.checked = false;
                    return
                }

                // 处理选中项目的字体为白色
                items.forEach(function (v) {
                    if (v['checked'] === true) {
                        v.children[0].style.color = 'white';
                    } else {
                        v.children[0].style.color = '#ccc';
                    }
                })
                //  处理颜色
                // 怎样判断一个按钮是否被点击
//                var that = null;

                //异步加载数据
                //用定时器模仿ajax
                if (this['checked']) {
                    this.className = this['color'];
                    var title = this.children[0].title;
                    var index = this.children[0].index;
                    var timeController = document.getElementById('timeCompare');
                    if (timeController.checked === true) {
                        option.series.pop();
                        option.series.pop();
                        myChart.clear();
                        option.series = dataCharts.currentData;
                        var searchArr = [];
                        items.forEach(function (v) {
                            if (v['checked'] === true) {
                                searchArr.push(v.children[0]['title']);
                            }
                        })
                    }
                    if (searchArr) {
                        for (var i = 0; i < dataCharts.prevData.length; i++) {
                            for (var j = 0; j < searchArr.length; j++) {
                                if (dataCharts.prevData[i]['name'] === searchArr[j]) {
                                    option.series.push(dataCharts.prevData[i]);
                                }
                            }
                        }
                    }

                    setTimeout(function () {
                        //显示点击对应的数据
                        option.legend.selected[title] = true;
                        //显示点击对应数据的纵坐标轴
                        option.yAxis[index]['show'] = true;
                        // 如果
                        for (var l = 0; l < arr.length; l++) {
                            if (option.yAxis[l]['position'] === 'left' && l !== index) {
                                option.yAxis[index]['position'] = 'right';
                                break;
                            } else {
                                option.yAxis[index]['position'] = 'left';
                            }
                        }
                        myChart.setOption(option);
                    }, 0)
                } else {
                    this.className = '';
                    var title = this.children[0].title;
                    var index = this.children[0].index;
                    setTimeout(function () {
                        option.legend.selected[title] = false;
                        option.yAxis[index]['show'] = false;
                        for (var k = 0; k < arr.length; k++) {
                            option.yAxis[k]['position'] = 'left';
                        }
                        myChart.setOption(option);
                    }, 0)
                }


            })
        });
        items[0].click();
        items[1].click();
    }
    ;
    //后台获取的数据
    var dataCharts = {
        data: ['2016.12.12', '2016.11.11'],
        prevData: [
            {
                yAxisIndex: 0,
                name: '收入(元)',
                type: 'line',
                data: ['20', '30', '50', '30', '28', '29', '23'],
                label: {
                    normal: {
                        show: false,
                        position: 'top' //值显示
                    }
                },
                lineStyle: {
                    normal: {
                        type: 'dotted'
                    }
                },
                id: 'incomePrev'
            },
            {

                yAxisIndex: 1,
                name: '曝光量',
                type: 'line',
                data: ['30', '35', '40', '38', '39', '41', '38'],
                label: {
                    normal: {
                        show: false,
                        position: 'top'
                    }
                },
                lineStyle: {
                    normal: {
                        type: 'dotted'
                    }
                },
                id: 'impPrev'
            },
            {
                yAxisIndex: 2,
                name: '点击量',
                type: 'line',
                data: ['10', '9', '20', '6', '9', '7', '12'],
                label: {
                    normal: {
                        show: false,
                        position: 'top'
                    }
                },
                lineStyle: {
                    normal: {
                        type: 'dotted'
                    }
                },
                id: 'clkPrev'
            },
            {
                yAxisIndex: 3,
                name: '点击率',
                type: 'line',
                data: ['19', '20', '28', '22', '24', '31', '33'],
                label: {
                    normal: {
                        show: false,
                        position: 'top'
                    }
                },
                lineStyle: {
                    normal: {
                        type: 'dotted'
                    }
                },
                id: 'ctrPrev'
            },
            {
                yAxisIndex: 4,
                name: 'eCPM(元)',
                type: 'line',
                data: ['24', '14', '15', '10', '19', '14', '18'],
                label: {
                    normal: {
                        show: false,
                        position: 'top'
                    }
                },
                lineStyle: {
                    normal: {
                        type: 'dotted'
                    }
                },
                id: 'ecpmPrev'
            },
            {
                yAxisIndex: 5,
                name: 'CPC(元)',
                type: 'line',
                data: ['29', '19', '19', '19', '19', '19', '11'],
                label: {
                    normal: {
                        show: false,
                        position: 'top'
                    }
                },
                lineStyle: {
                    normal: {
                        type: 'dotted'
                    }
                },
                id: 'ecpcPrev'
            },],
        currentData: [
            {
                yAxisIndex: 0,
                name: '收入(元)',
                type: 'line',
                data: ['200', '300', '500', '300', '280', '290', '230'],
                label: {
                    normal: {
                        show: false,
                        position: 'top' //值显示
                    }
                },
                id: 'income'
            },
            {
                yAxisIndex: 1,
                name: '曝光量',
                type: 'line',
                data: ['300', '350', '400', '380', '390', '410', '380'],
                label: {
                    normal: {
                        show: false,
                        position: 'top'
                    }
                },
                id: 'imp'
            },
            {
                yAxisIndex: 2,
                name: '点击量',
                type: 'line',
                data: ['100', '90', '200', '65', '99', '71', '120'],
                label: {
                    normal: {
                        show: false,
                        position: 'top'
                    }
                },
                id: 'clk'
            },
            {
                yAxisIndex: 3,
                name: '点击率',
                type: 'line',
                data: ['190', '200', '280', '220', '240', '319', '330'],
                label: {
                    normal: {
                        show: false,
                        position: 'top'
                    }
                },
                id: 'ctr'
            },
            {
                yAxisIndex: 4,
                name: 'eCPM(元)',
                type: 'line',
                data: ['240', '140', '150', '100', '198', '140', '180'],
                label: {
                    normal: {
                        show: false,
                        position: 'top'
                    }
                },
                id: "ecpm"
            },
            {
                yAxisIndex: 5,
                name: 'CPC(元)',
                type: 'line',
                data: ['24', '14', '15', '10', '19', '14', '18'],
                label: {
                    normal: {
                        show: false,
                        position: 'top'
                    }
                },
                id: 'ecpc'
            },]
    };
    //实际画图的数据
    var option = {
        color: ["#f04e35", "#0077e5", "#ffc801", "#a75adc", "#ff91bb", "#99cc01"],
        tooltip: {
            trigger: 'axis',
            axisPointer: {
                type: 'line',
                lineStyle: {
                    type: 'dotted',
                    color: '#ccc'
                }
            },
            formatter: function (params) {
                 console.log('option',params);
                 console.log('dataCharts', dataCharts);
                var str;
                for (var p = 0; p < params.length; p++) {
                    if (params[p].value == null) {
                        params[p].value = '-';
                        params[p].data = '-';
                    }
                    if (params[p].seriesName != '点击率' && params[p].value !== "-"){
                        params[p].value =  splitK(params[p].value);
                        params[p].data = splitK(params[p].data);
                    }
                    if (params[p].seriesName === '点击率' && params[p].value !== "-") {
//                        params[p].value += '%';
//                        params[p].data += '%';
                        params[p].value = params[p].value + '%';
                        params[p].data = params[p].data + '%';
                    }
                }
                if (params.length === 1 && params[0].data !== '-') {
                    console.log('1111')
                    str = '<ul id="tooltip">'
                        + '<li id="tooltipBall">'
                        + '<div style="visibility: hidden">占位</div>'
                        + '<div style="color: ' + params[0]['color'] + '"><span>●</span></div>'
                        + '</li>'
                        + '<li>'
                        + '<div style="visibility: hidden">占位</div>'
                        + '<div style="color: ' + params[0]['color'] + '">' + params[0].seriesName + '</div>'
                        + '</li>'
                        + '<li>'
                        + '<div class="tooltipData">' + params[0].name + '</div>'
                        + '<div style="color: ' + params[0]['color'] + '">' + params[0].value + '</div>'
                        + '</li>'
                        + '</ul>';
                }
                if (params.length === 2) {
                    if (params[0].data === '-' && params[1].data === '-') {
                        return ""
                    }
                    //处理弹出框没有数据不显示问题
                    var type1 = params[0].seriesName;
                    var type2 = params[1].seriesName;
                    if (type1 !== type2) {
                        console.log('222')
                        str = '<ul id="tooltip">'
                            + '<li id="tooltipBall">'
                            + '<div style="visibility: hidden">占位</div>'
                            + '<div style="color: ' + params[0]['color'] + '"><span>●</span></div>'
                            + '<div style="color:' + params[1]['color'] + ' "><span>●</span></div>'
                            + '</li>'
                            + '<li>'
                            + '<div style="visibility: hidden">占位</div>'
                            + '<div style="color: ' + params[0]['color'] + '">' + params[0].seriesName + '</div>'
                            + '<div style="color: ' + params[1]['color'] + '">' + params[1].seriesName + '</div>'
                            + '</li>'
                            + '<li>'
                            + '<div class="tooltipData">' + params[0].name + '</div>'
                            + '<div style="color: ' + params[0]['color'] + '">' + params[0].data + '</div>'
                            + '<div style="color: ' + params[1]['color'] + '">' + params[1].data + '</div>'
                            + '</li>'
                            + '</ul>';
                    } else {
                        str = '<ul id="tooltip">'
                            + '<li id="tooltipBall">'
                            + '<div style="visibility: hidden">占位</div>'
                            + '<div style="color: ' + params[0]['color'] + '"><span>●</span></div>'
                            + '</li>'
                            + '<li>'
                            + '<div style="visibility: hidden">占位</div>'
                            + '<div style="color: ' + params[0]['color'] + '">' + params[0].seriesName + '</div>'
                            + '</li>'
                            + '<li>'
                            + '<div class="tooltipData">' + params[0].name + '</div>'
                            + '<div style="color: ' + params[0]['color'] + '">' + params[0].data + '</div>'
                            + '</li>'
                            + '<li>'
                            + '<div class="tooltipData">' + params[1].name + '</div>'
                            + '<div style="color: ' + params[0]['color'] + '">' + params[1].data + '</div>'
                            + '</li>'
                            + '</ul>';
                    }
                }
                else if (params.length === 4) {
//                    处理弹出框没有数据不显示的问题
                    var hide = true;
                    for (var p = 0; p < 4; p++) {
                        if (params[p].data !== '-' ) {
                            hide = false;
                        }
                    }
                    if(hide) {
                        return '';
                    }
                    for (var p = 0; p < params.length; p++) {
                        var type = typeof params[p].value;
                        if (type.indexOf('undefined') !== -1 || params[p].value === 'undefined%') {
                            params[p].value = 'null';
                        }
                    }
                    var type1 = params[0].value;
                    var type2 = params[1].value;
                    var type3 = params[2].value;
                    var type4 = params[3].value;
                    if (type1 === 'null' && type2 === 'null' && type3 === 'null' && type4 === 'null') {
                        return str = ''
                    }
                    str = '<ul id="tooltip">'
                        + '<li id="tooltipBall">'
                        + '<div style="visibility: hidden">占位</div>'
                        + '<div style="color: ' + params[0]['color'] + '"><span>●</span></div>'
                        + '<div style="color: ' + params[1]['color'] + '"><span>●</span></div>'
                        + '</li>'
                        + '<li>'
                        + '<div style="visibility: hidden">占位</div>'
                        + '<div style="color: ' + params[0]['color'] + '">' + params[0].seriesName + '</div>'
                        + '<div style="color: ' + params[1]['color'] + '">' + params[1].seriesName + '</div>'
                        + '</li>'
                        + '<li>'
                        + '<div class="tooltipData">' + params[0].name + '</div>'
                        + '<div style="color: ' + params[0]['color'] + '">' + params[0].value + '</div>'
                        + '<div style="color: ' + params[1]['color'] + '">' + params[1].value + '</div>'
                        + '</li>'
                        + '<li>'
                        + '<div class="tooltipData">' + params[1].name + '</div>'
                        + '<div style="color: ' + params[0]['color'] + '">' + params[2].value + '</div>'
                        + '<div style="color: ' + params[1]['color'] + '">' + params[3].value + '</div>'
                        + '</li>'
                        + '</ul>';
                }
                ;
                return str;
            },
            backgroundColor: 'rgba(0,0,0,0)',
            showDelay: 20,
            position: function (point, params, dom, rect, size) {
                var width = document.getElementById('admEchart').offsetWidth;
                var x = point[0] > width / 2 ? point[0] - 400 : point[0];
                var obj = [x, point[1]];
                return obj;
            }
        },
        legend: {
            selected: {
                '收入(元)': false,
                '曝光量': false,
                '点击量': false,
                '点击率': false,
                'eCPM(元)': false,
                'CPC(元)': false
            }
        },
        grid: {
            bottom: '8%',
        },
        xAxis: {
            type: 'category',
            boundaryGap: false,
            splitLine: { //网格线
                show: false,
            },
            data: ['周1', '周2', '周3', '周4', '周5', '周6', '周7'],
//               data:tempArr,
            //坐标轴轴线相关
            axisLine: {
                lineStyle: {
                    color: '#ccc',
                }
            },
            //坐标轴刻度相关
            axisTick: {
                show: false,
            }

        },
        yAxis: [
            {
                show: false,
                type: 'value',
                name: '收入(元)',
                splitLine: {
                    show: false,
                },
                //坐标轴线相关
                axisLine: {
                    lineStyle: {
                        color: '#f04e35'
//                        color:"#ccc",
                    }
                },
                //坐标轴相关
                axisTick: {
                    show: false
                },
            },
            {
                show: false,
                type: 'value',
                name: '曝光量',
//                max: 100,
//                min: 0,
                splitLine: {
                    show: false,
                },
                axisLine: {
                    lineStyle: {
                        color: '#0077e5'
                    }
                },
                axisTick: {
                    show: false
                },
            },
            {
                show: false,
                type: 'value',
                name: '点击量',
                splitLine: {
                    show: false,
                },
                axisLine: {
                    lineStyle: {
                        color: '#ffc801'
                    }
                },
                axisTick: {
                    show: false
                },
            },
            {
                show: false,
                type: 'value',
                name: '点击率',
                splitLine: {
                    show: false,
                },
                axisLine: {
                    lineStyle: {
                        color: '#a75adc'
                    }
                },
                axisTick: {
                    show: false
                },
                axisLabel: {
                    formatter: '{value}%'
                }
            },
            {
                show: false,
                type: 'value',
                name: 'eCPM(元)',
                splitLine: {
                    show: false,
                },
                axisLine: {
                    lineStyle: {
                        color: '#ff91bb'
                    }
                },
                axisTick: {
                    show: false
                },
            },
            {
                show: false,
                type: 'value',
                name: 'CPC(元)',
                splitLine: {
                    show: false,
                },
                axisLine: {
                    lineStyle: {
                        color: '#99cc01'
                    }
                },
                axisTick: {
                    show: false
                },
            },
        ],
        series: [
            {
                yAxisIndex: 0,
                name: '收入(元)',
                type: 'line',
                data: ['2000', '3000', '5000', '3000', '2800', '2900', '2300'],
                label: {
                    normal: {
                        show: false,
                        position: 'top', //值显示
                    }
                },
            },
            {
                yAxisIndex: 1,
                name: '曝光量',
                type: 'line',
                data: ['300', '350', '400', '380', '390', '410', '380'],
                label: {
                    normal: {
                        show: false,
                        position: 'top',
                    }
                },
            },
            {
                yAxisIndex: 2,
                name: '点击量',
                type: 'line',
                data: ['100', '90', '200', '65', '99', '71', '120'],
                label: {
                    normal: {
                        show: false,
                        position: 'top'
                    }
                },
            },
            {
                yAxisIndex: 3,
                name: '点击率',
                type: 'line',
                data: ['190', '200', '280', '220', '240', '319', '330'],
                label: {
                    normal: {
                        show: false,
                        position: 'top',
                    }
                },
            },
            {
                yAxisIndex: 4,
                name: 'eCPM(元)',
                type: 'line',
                data: ['240', '140', '150', '100', '198', '140', '180'],
                label: {
                    normal: {
                        show: false,
                        position: 'top'
                    }
                },
            },
            {
                yAxisIndex: 5,
                name: 'CPC(元)',
                type: 'line',
                data: ['24', '14', '15', '10', '19', '14', '18'],
                label: {
                    normal: {
                        show: false,
                        position: 'top'
                    }
                },
            },],
        //工具栏
        toolbox: {
            show: false,
            feature: {
                saveAsImage: {
                    type: 'png',
                    pixelRatio: 2,

                }
            }

        }
    };
    //页面加载进来的处理函数
    function beforeTime() {

        dataCharts.data[0] = nowTime.start.replace(/\//g, '.');
        dataCharts.data[1] = lastTime.end.replace(/\//g, '.');

        if(window.sessionStorage.getItem('mediasessiontimeStart') != null){
            if (nowTime.start === nowTime.end) {
                mediadashboardhourlyAPI(nowTime.start, nowTime.end, 'imp,clk,ctr,income,ecpm,ecpc', dashboardhourlyAPIonSucessCurrent);
                mediadashboardhourlyAPI(lastTime.start, lastTime.end, 'imp,clk,ctr,income,ecpm,ecpc', dashboardhourlyAPIonSucessPrev);

                //处理导航栏数据
                mediasumAPI(nowTime.start, nowTime.end, dashboardclientsumAPIonSuccessCurrent);
                mediasumAPI(lastTime.start, lastTime.end, dashboardclientsumAPIonSuccessPrev);
            } else {
                mediadashboarddailyAPI(nowTime.start, nowTime.end, 'imp,clk,ctr,income,ecpm,ecpc', dashboarddailyAPIonSucessCurrent);
                mediadashboarddailyAPI(lastTime.start, lastTime.end, 'imp,clk,ctr,income,ecpm,ecpc', dashboarddailyAPIonSucessPrev);

                //处理导航栏数据
                mediasumAPI(nowTime.start, nowTime.end, dashboardclientsumAPIonSuccessCurrent);
                mediasumAPI(lastTime.start, lastTime.end, dashboardclientsumAPIonSuccessPrev);
            }
        }else {
            mediadashboardhourlyAPI(nowTime.start, nowTime.end, 'imp,clk,ctr,income,ecpm,ecpc', beforeTimeCurrent);
            mediadashboardhourlyAPI(lastTime.start, lastTime.end, 'imp,clk,ctr,income,ecpm,ecpc', dashboardhourlyAPIonSucessPrev);

        }


         //给日历插件绑定监听函数
        {
        setTimeout(function(){
            $(".ranges").on("click","li",function(e) {
//                console.log(e.target);
                var content = e.target.innerHTML;
                var timeTarget = $("#topNow").children()[0];
                timeTarget.innerHTML = content;
                timeTarget.style.fontSize = 20 + "px";
            })
        },0)
        }
    }
    ;

    function beforeTimeCurrent(data) {
        dataCharts.data[0] = nowTime.start.replace(/\//g, '.');
        dataCharts.data[1] = lastTime.start.replace(/\//g, '.');

        var req = JSON.parse(data);
        var tempArr = [];
        //给全局对象返回Current的数
        var xImp = [], xClk = [], xCtr = [], xIncome = [], xEcpm = [], xEcpc = [];
        if (req.status === 1) {
            for (var k in req.data) {
                tempArr[k] = req.data[k]['period'];
                xImp[k] = req.data[k]['imp'];
                xClk[k] = req.data[k]['clk'];
                xCtr[k] = req.data[k]['ctr'];
                xIncome[k] = req.data[k]['income'];
                xEcpm[k] = req.data[k]['ecpm'];
                xEcpc[k] = req.data[k]['ecpc'];
            }
        }
        option.xAxis.data = tempArr;
        for (var index = 0; index < dataCharts.currentData.length; index++) {
            switch (dataCharts.currentData[index].id) {
                case 'imp' :
                    dataCharts.currentData[index].data = xImp;
                    break;
                case 'clk' :
                    dataCharts.currentData[index].data = xClk;
                    break;
                case 'ctr' :
                    dataCharts.currentData[index].data = xCtr;
                    break;
                case 'income' :
                    dataCharts.currentData[index].data = xIncome;
                    break;
                case 'ecpm' :
                    dataCharts.currentData[index].data = xEcpm;
                    break;
                case 'ecpc' :
                    dataCharts.currentData[index].data = xEcpc;
                    break;
            }
        }
        myChart.setOption(option);
        //处理导航栏的数据
        mediasumAPI(nowTime.start, nowTime.end, sumCurrent);
        mediasumAPI(lastTime.start, lastTime.end, sumPrev);
    }
    //导航栏处理当前阶段数据
    function sumCurrent(data) {
        var req = JSON.parse(data);
        if (req.status === 1) {
            var today = '';
            if (req.data.length === 0) {
                today = '昨天'
            } else {
                today = req.data[0]['data_time'];
            }

            topRender(req.data[0], true, '昨天');
        }
    }
    ;
    //导航栏处理对比阶段数据
    function sumPrev(data) {
        var req = JSON.parse(data);
        if (req.status === 1) {
            var time = {
                'start': moment().format('YYYY/MM/DD'),
                'end': moment().format('YYYY/MM/DD')
            };
            time = transfer(time);
            var timebefore = transfer(time);
            topRender(req.data[0], false, timebefore.start);
        }
    }
    ;
    //折线图分时Current
    function dashboardhourlyAPIonSucessCurrent(data) {
        dataCharts.data[0] = nowTime.start.replace(/\//g, '.');
        dataCharts.data[1] = lastTime.start.replace(/\//g, '.');
        document.querySelectorAll('.timeLogo')[0].innerHTML = dataCharts.data[0];
        document.querySelectorAll('.timeLogo')[1].innerHTML = dataCharts.data[1];
        var req = JSON.parse(data);
        var tempArr = [];
        //给全局对象返回Current的数
        var xImp = [], xClk = [], xCtr = [], xIncome = [], xEcpm = [], xEcpc = [];
        if (req.status === 1) {
            for (var k in req.data) {
                tempArr[k] = req.data[k]['period'];
                xImp[k] = req.data[k]['imp'];
                xClk[k] = req.data[k]['clk'];
                xCtr[k] = req.data[k]['ctr'];
                xIncome[k] = req.data[k]['income'];
                xEcpm[k] = req.data[k]['ecpm'];
                xEcpc[k] = req.data[k]['ecpc'];
            }
        }
        option.xAxis.data = tempArr;
        for (var index = 0; index < dataCharts.currentData.length; index++) {
            switch (dataCharts.currentData[index].id) {
                case 'imp' :
                    dataCharts.currentData[index].data = xImp;
                    break;
                case 'clk' :
                    dataCharts.currentData[index].data = xClk;
                    break;
                case 'ctr' :
                    dataCharts.currentData[index].data = xCtr;
                    break;
                case 'income' :
                    dataCharts.currentData[index].data = xIncome;
                    break;
                case 'ecpm' :
                    dataCharts.currentData[index].data = xEcpm;
                    break;
                case 'ecpc' :
                    dataCharts.currentData[index].data = xEcpc;
                    break;
            }
        }
        myChart.setOption(option);
    }
    //折线图分时Prev
    function dashboardhourlyAPIonSucessPrev(data) {
        var req = JSON.parse(data);
        var tempArr = [];
        var xImp = [], xClk = [], xCtr = [], xIncome = [], xEcpm = [], xEcpc = [];
        if (req.status === 1) {
            for (var k in req.data) {
                tempArr[k] = req.data[k]['period'];
                xImp[k] = req.data[k]['imp'];
                xClk[k] = req.data[k]['clk'];
                xCtr[k] = req.data[k]['ctr'];
                xIncome[k] = req.data[k]['income'];
                xEcpm[k] = req.data[k]['ecpm'];
                xEcpc[k] = req.data[k]['ecpc'];
            }
        }

//        option.xAxis.data = tempArr;
        for (var index = 0; index < dataCharts.prevData.length; index++) {
            switch (dataCharts.prevData[index].id) {
                case 'impPrev' :
                    dataCharts.prevData[index].data = xImp;
                    break;
                case 'clkPrev' :
                    dataCharts.prevData[index].data = xClk;
                    break;
                case 'ctrPrev' :
                    dataCharts.prevData[index].data = xCtr;
                    break;
                case 'incomePrev' :
                    dataCharts.prevData[index].data = xIncome;
                    break;
                case 'ecpmPrev' :
                    dataCharts.prevData[index].data = xEcpm;
                    break;
                case 'ecpcPrev' :
                    dataCharts.prevData[index].data = xEcpc;
                    break;
            }
        }
//        myChart.setOption(option);
    }
    //折线图分日Current
    function dashboarddailyAPIonSucessCurrent(data) {
        dataCharts.data[0] = nowTime.start + "－" + nowTime.end;
        dataCharts.data[1] = lastTime.start + "－" + lastTime.end;
        console.log('dataCharts', dataCharts.data[0].replace(/\//g, '.'))
        document.querySelectorAll('.timeLogo')[0].innerHTML = dataCharts.data[0].replace(/\//g, '.');
        document.querySelectorAll('.timeLogo')[1].innerHTML = dataCharts.data[1].replace(/\//g, '.');
        var req = JSON.parse(data);
        var tempArr = [];
        //给全局对象返回Current的数
        var xImp = [], xClk = [], xCtr = [], xIncome = [], xEcpm = [], xEcpc = [];
        if (req.status === 1) {
            for (var k in req.data) {
                tempArr[k] = req.data[k]['date'];
                xImp[k] = req.data[k]['imp'];
                xClk[k] = req.data[k]['clk'];
                xCtr[k] = req.data[k]['ctr'];
                xIncome[k] = req.data[k]['income'];
                xEcpm[k] = req.data[k]['ecpm'];
                xEcpc[k] = req.data[k]['ecpc'];
            }
        }
        option.xAxis.data = tempArr;
        for (var index = 0; index < dataCharts.currentData.length; index++) {
            switch (dataCharts.currentData[index].id) {
                case 'imp' :
                    dataCharts.currentData[index].data = xImp;
                    break;
                case 'clk' :
                    dataCharts.currentData[index].data = xClk;
                    break;
                case 'ctr' :
                    dataCharts.currentData[index].data = xCtr;
                    break;
                case 'income' :
                    dataCharts.currentData[index].data = xIncome;
                    break;
                case 'ecpm' :
                    dataCharts.currentData[index].data = xEcpm;
                    break;
                case 'ecpc' :
                    dataCharts.currentData[index].data = xEcpc;
                    break;
            }
        }
        myChart.setOption(option);
    }
    //折线图分日Prev
    function dashboarddailyAPIonSucessPrev(data) {
        var req = JSON.parse(data);
        var tempArr = [];
        var xImp = [], xClk = [], xCtr = [], xIncome = [], xEcpm = [], xEcpc = [];
        if (req.status === 1) {
            for (var k in req.data) {
                tempArr[k] = req.data[k]['period'];
                xImp[k] = req.data[k]['imp'];
                xClk[k] = req.data[k]['clk'];
                xCtr[k] = req.data[k]['ctr'];
                xIncome[k] = req.data[k]['income'];
                xEcpm[k] = req.data[k]['ecpm'];
                xEcpc[k] = req.data[k]['ecpc'];
            }
        }
        for (var index = 0; index < dataCharts.prevData.length; index++) {
            switch (dataCharts.prevData[index].id) {
                case 'impPrev' :
                    dataCharts.prevData[index].data = xImp;
                    break;
                case 'clkPrev' :
                    dataCharts.prevData[index].data = xClk;
                    break;
                case 'ctrPrev' :
                    dataCharts.prevData[index].data = xCtr;
                    break;
                case 'incomePrev' :
                    dataCharts.prevData[index].data = xIncome;
                    break;
                case 'ecpmPrev' :
                    dataCharts.prevData[index].data = xEcpm;
                    break;
                case 'ecpcPrev' :
                    dataCharts.prevData[index].data = xEcpc;
                    break;
            }
        }
//        myChart.setOption(option);
    }

    // 处理导航栏数据
    function dashboardclientsumAPIonSuccessCurrent(data) {
        var req = JSON.parse(data);
        if (req.status === 1) {
            var time = {
                'start': moment().format('YYYY/MM/DD'),
                'end': moment().format('YYYY/MM/DD')
            };
            time = transfer(time);
            if (time.start  === nowTime.start) {
                topRender(req.data[0], true, '昨天');
            }else {
                //顶部数据展示日期的格式处理
                if (nowTime.start === nowTime.end) {
                    topRender(req.data[0], true, nowTime.start.replace(/\//g, '-'));
                } else {
                    topRender(req.data[0], true, nowTime.start.replace(/\//g, '-') + '至' + nowTime.end.replace(/\//g, '-'));
                }
            }

        }
    }
    function dashboardclientsumAPIonSuccessPrev(data) {
        var req = JSON.parse(data);
        if (req.status === 1) {
            //顶部数据展示日期的格式处理
            if (lastTime.start === lastTime.end) {
                topRender(req.data[0], false, lastTime.start.replace(/\//g, '-'));
            } else {
                topRender(req.data[0], false, lastTime.start.replace(/\//g, '-') + '至' + lastTime.end.replace(/\//g, '-'));
            }

        }
    }

    //  初始化折线图
    //  程序执行
    option.series = dataCharts.currentData;
    myChart.setOption(option);
//    beforeTime();
    render(arr);
    beforeTime();

    // --折线图end
    searchDate_daterangepicker(nowTime.start, nowTime.end, nowTime.end);

    function searchDate_daterangepicker(startDate, endDate, maxDate) {
        $('#searchDate').daterangepicker({
            startDate: startDate,
            endDate: endDate,
            maxDate: maxDate, //最大时间
            minDate: moment('1970-01-01'), //最小时间
            dateLimit: {
                days: 365
            }, //起止时间的最大间隔
            showDropdowns: true,
            showWeekNumbers: false, //是否显示第几周
            timePicker: false, //是否显示小时和分钟
            timePickerIncrement: 60, //时间的增量，单位为分钟
            timePicker12Hour: false, //是否使用12小时制来显示时间
            ranges: {
//                '今日': [moment().startOf('day'), moment()],
                '昨天': [moment().subtract('days', 1).startOf('day'), moment().subtract('days', 1).endOf('day')],
                '过去7天': [moment().subtract('days', 7), moment().subtract('days', 1)],
                '过去14天': [moment().subtract('days', 14), moment().subtract('days', 1)],
                '过去21天': [moment().subtract('days', 21), moment().subtract('days', 1)],
                '过去30天': [moment().subtract('days', 30), moment().subtract('days', 1)],
                '上个月': [new Date()
                    .setFullYear(new Date().getMonth() == 0 ? new Date().getFullYear() - 1 : new Date().getFullYear(), new Date().getMonth() == 0 ? 11 : new Date().getMonth() - 1, 1),
                    moment().subtract('days', new Date().getDate())]
            },
            showCustomRangeLabel: false,
            alwaysShowCalendars: true,
            linkedCalendars: false,

            opens: 'left', //日期选择框的弹出位置
            buttonClasses: ['btn btn-default'],
            applyClass: 'btn-small btn-primary',
            cancelClass: 'btn-small',

            separator: ' to ',
            locale: {
                applyLabel: '确定',
                cancelLabel: '取消',
                fromLabel: '起始时间',
                toLabel: '结束时间',
                customRangeLabel: '自定义',
                daysOfWeek: ['日', '一', '二', '三', '四', '五', '六'],
                monthNames: ['一月', '二月', '三月', '四月', '五月', '六月',
                    '七月', '八月', '九月', '十月', '十一月', '十二月'],
                firstDay: 1,
                format: 'YYYY/MM/DD' //控件中from和to 显示的日期格式
            }
        }, function (start, end, label) {
            $('#searchDate').val(start.format('YYYY/MM/DD') + ',' + end.format('YYYY/MM/DD'));
//            layer.msg($('#searchDate').val());
//日历插件选择的时间
            var begin = start.format('YYYY/MM/DD');
            var end = end.format('YYYY/MM/DD');
            nowTime.start = begin;
            nowTime.end = end;
            lastTime = transfer(nowTime);//获取对比的时间

            window.sessionStorage.setItem('mediasessiontimeStart', nowTime.start);
            window.sessionStorage.setItem('mediasessiontimeEnd', nowTime.end);
            window.sessionStorage.setItem('mediasessiontimeLastStart', lastTime.start);
            window.sessionStorage.setItem('mediasessiontimeLastEnd', lastTime.end);
            //折线图 start
            if (nowTime.start === nowTime.end) {
                dataCharts.data[0] = nowTime.start;
                dataCharts.data[1] = lastTime.start;
                mediadashboardhourlyAPI(nowTime.start, nowTime.end, 'imp,clk,ctr,income,ecpm,ecpc', dashboardhourlyAPIonSucessCurrent);
                mediadashboardhourlyAPI(lastTime.start, lastTime.end, 'imp,clk,ctr,income,ecpm,ecpc', dashboardhourlyAPIonSucessPrev);

                //处理导航栏数据
                mediasumAPI(nowTime.start, nowTime.end, dashboardclientsumAPIonSuccessCurrent);
                mediasumAPI(lastTime.start, lastTime.end, dashboardclientsumAPIonSuccessPrev);
            } else {
                mediadashboarddailyAPI(nowTime.start, nowTime.end, 'imp,clk,ctr,income,ecpm,ecpc', dashboarddailyAPIonSucessCurrent);
                mediadashboarddailyAPI(lastTime.start, lastTime.end, 'imp,clk,ctr,income,ecpm,ecpc', dashboarddailyAPIonSucessPrev);

                //处理导航栏数据
                mediasumAPI(nowTime.start, nowTime.end, dashboardclientsumAPIonSuccessCurrent);
                mediasumAPI(lastTime.start, lastTime.end, dashboardclientsumAPIonSuccessPrev);
            }
            //折线图end
            var top = 5;//柱状图
//  基础模板柱状图
            basetemplateincometopAPI_fun(begin, end, top);
//  基础模板点击率柱状图
            basetemplatectrAPI_fun(begin, end, top);
////  媒体收入占比
//            mediaincomeoccupyAPI_fun(begin, end, top);
////广告位收入占比
//            slotincomeoccupyAPI_fun(begin, end, top);

            $('#table_media').bootstrapTable('refresh');//收入表格刷新
            $('#table_client').bootstrapTable('refresh');
            refresh_echarts();
        });
    }
    //    权限控制
    var auth = getAuthorityByUrl('/dashboard/mediadashboardview');
    function checkAuthority() {
        if (auth == 0) {
            toFirstLegalPage();
        }
    }
    checkAuthority();

</script>

<!--柱状图-->
<script type="text/javascript">
    <!--模板收入排行柱状图-->
    //模板收入柱状图TOP5
    function basetemplateincometopAPI_fun(begin, end, top) {
        var basetemplate_name = new Array();//收入(元)
        var basetemplate_income = new Array();
        basetemplateincometopAPI(begin, end, top, basetemplateincometopAPIonSuccess);
        function basetemplateincometopAPIonSuccess(result) {
            var req = JSON.parse(result);
            if (req.status == 1) {
                if (req.data.length == 0) {
                    basetemplate_name = [];
                    basetemplate_income = [];
                }
                for (var q = 0; q < req.data.length; q++) {
                    basetemplate_name[q] = req.data[q].template_name;
                    basetemplate_income[q] = req.data[q].income;
                }
            } else {
                layer.msg(req.msg);
            }
            baseTemplate_income_fun(basetemplate_name, basetemplate_income);
        }
    }
    function baseTemplate_income_fun(basetemplate_name, basetemplate_income) {
        myChart_template_income = echarts.init(document.getElementById('baseTemplate_income'));
        var option_template_income = {
            title: {
                text: ''
            },
            tooltip: {
                show: false,//鼠标滑过图形时显示具体信息
            },
            legend: {
//            selectedMode:false,
                data: ['']
            },
            xAxis: {
                data: basetemplate_name,
                axisLabel: {
                    interval: 0,//标签设置为全部显示
                    formatter: function (basetemplate_name) {
                        var newParamsName = "";
                        newParamsName = setLabel(basetemplate_name , 6);
                        return newParamsName;
                    },
                    textStyle: {
                        color: '#999999',
                        fontSize: 12
                    }
                },
                axisLine: {
                    lineStyle: {
                        color: '#999999'
                    }
                }
            },
            yAxis: {
                show: true,
                axisLabel:{
                    formatter: function (params) {
                        var newParamsName = "";
                        newParamsName = splitK(params);
//                        console.log('params',newParamsName)
                        newParamsName = setLabel(newParamsName , 12);
                        return newParamsName;
                    },
                },
                axisLine: {
                    lineStyle: {
                        color: '#999999'
                    }
                }
            },
            itemStyle: {
                normal: {
                    color: function (params) {
                        var colorList = [
                            '#ffc327', '#00d5cd', '#00d5cd', '#00d5cd', '#00d5cd'];
                        return colorList[params.dataIndex]
                    }
                }
            },
            grid: {
                bottom: '11.5%',
                left:'80'
            },
            series: [{
//            name: '模板收入排行',
                type: 'bar',
                data: basetemplate_income,
                barWidth: 50, //宽度
                label: {
                    normal: {
                        show: true,
                        position: 'top',
                        formatter:function (params) {
                            return splitK(params.data);
                        }
                        },
                },
            }]
        };
        myChart_template_income.clear();
        myChart_template_income.setOption(option_template_income);

    }

    //模板点击率排行TOP5
    function basetemplatectrAPI_fun(begin, end, top) {
        var basetemplate_ctr_name = new Array();
        var basetemplate_ctr_ctr = new Array();
        basetemplatectrAPI(begin, end, top, basetemplatectrAPIonSuccess);
        function basetemplatectrAPIonSuccess(result) {
            var req = JSON.parse(result);
            if (req.status == 1) {
                if (req.data.length == 0) {
                    basetemplate_ctr_name = [];
                    basetemplate_ctr_ctr = [];
                }
                for (var w = 0; w < req.data.length; w++) {
                    basetemplate_ctr_name[w] = req.data[w].template_name;
                    basetemplate_ctr_ctr[w] = req.data[w].ctr;
                }
            }
            else {
                layer.msg(req.msg);

            }
            baseTemplate_ctr_fun(basetemplate_ctr_name, basetemplate_ctr_ctr);
        }
    }
    function baseTemplate_ctr_fun(basetemplate_ctr_name, basetemplate_ctr_ctr) {
        myChart_template_ctr = echarts.init(document.getElementById('baseTemplate_ctr'));
        var option_template_ctr = {
            title: {
                text: ''
            },
            tooltip: {
                show: false,
            },
            legend: {
                data: ['']
            },
            xAxis: {
                data: basetemplate_ctr_name,
                axisLabel: {
                    interval: 0,//标签设置为全部显示
                    formatter: function (basetemplate_ctr_name) {
                        var newParamsName = "";
                        newParamsName = setLabel(basetemplate_ctr_name , 6);
                        return newParamsName;
                    },
                    textStyle: {
                        color: '#999999',
                        fontSize: 12
                    }
                },
                axisLine: {
                    lineStyle: {
                        color: '#999999'
                    }
                }
            },
            yAxis: {
                axisLine: {
                    lineStyle: {
                        color: '#999999'
                    }
                },
                type: 'value',
                axisLabel: {
                    show: true,
                    interval: 'auto',
                    formatter: '{value} %'
                },
            },
            itemStyle: {
                normal: {
                    color: function (params) {
                        var colorList = [
                            '#ffc327', '#00d5cd', '#00d5cd', '#00d5cd', '#00d5cd'];
                        return colorList[params.dataIndex]
                    }
                }
            },
            grid: {
                bottom: '11.5%',
                left:'100'
            },
            series: [{
                name: '样式点击率排行',
                type: 'bar',
                data: basetemplate_ctr_ctr,
                barWidth: 50,
                label: {
                    normal: {
//                        type: 'value',
                        show: true,
                        position: 'top',
//                        grid:{
//                            bottom:'50%'
//                        },
                        formatter:function (params){
                            var new_str = '';
                            new_str = splitK(params.data) + '%';
                            return new_str;
                        }
                    }
                },
            }]
        };
        myChart_template_ctr.clear();
        myChart_template_ctr.setOption(option_template_ctr);
    }
    //媒体收入占比
//    function mediaincomeoccupyAPI_fun(begin, end, top) {
//        var media_income_name = new Array();
//        var media_income_occupy = new Array();
//        var media_income_occupy_true = new Array();
//        mediaincomeoccupyAPI(begin, end, top, mediaincomeoccupyAPIonSuccess);
//        function mediaincomeoccupyAPIonSuccess(result) {
//            var req = JSON.parse(result);
//            if (req.status == 1) {
//                if(req.data.length <= 1)
//                {
//                    $('#media_income_id').hide();
//                }
//                else {
//                    $('#media_income_id').show();
//                }
//                if (req.data.length == 0) {
//                    media_income_name = [];
//                    media_income_occupy = [];
//                }
//                for (var w = 0; w < req.data.length; w++) {
//                    if(req.data[w].occupy == 0)
//                    {
//                        continue;
//                    }
//                    media_income_name[w] = req.data[w].media_name;
//                    media_income_occupy_true[w] = req.data[w].occupy;
//                    if(req.data[w].occupy < 1)
//                    {
//                        media_income_occupy[w] = ++req.data[w].occupy;
//                    }else{
//                        media_income_occupy[w] = req.data[w].occupy;
//                    }
//                }
//            }
//        }
//        meida_income_fun(media_income_name, media_income_occupy,media_income_occupy_true);
//    }
//    function meida_income_fun(media_income_name, media_income_occupy,media_income_occupy_true) {
//        myChart_pie_media = echarts.init(document.getElementById('media_income'));
//        option_pie_media = {
//            backgroundColor: '#ffffff',
//            color: ['#FDB225', '#16A59C', '#0078e6', '#a75adc', '#33cbcc'],
//            tooltip: {
//                show: true,//鼠标滑过图形时显示具体信息
//                formatter:function (Params){
//
//                    var new_str = Params.data.name + ' : ' + media_income_occupy_true[Params.dataIndex] + '%';
//                    return new_str;
//                }
//            },
//            legend: {     // 饼图外的各项数据item
//                orient: 'vertical',//图例列表的布局朝向。
//                left: '25%',//图例组件离容器左侧的距离。
//                top: '65%',
//                itemWidth: 8,//图例标记的图形宽度。
//                itemHeight: 8,
//                itemGap:8,
//                data: media_income_name,
//                formatter:function (media_income_name) { //名称过长时，截取八个，剩下显示省略，鼠标悬浮时显示全称
//                    var newParamsName = "";
//                    newParamsName = cutstrbyChar(media_income_name, 22);
//                    return newParamsName;
//                },
//                tooltip: {
//                    show: true
//                }
//            },
//            series: [{    // 饼图的属性配置
//                name: '',
//                type: 'pie',
//                center: ['50%', '35%'],//饼图的中心（圆心）坐标，数组的第一项是横坐标，第二项是纵坐标。
//                radius: ['40%', '60%'],//饼图的半径，数组的第一项是内半径，第二项是外半径。支持设置成百分比，相对于容器高宽中较小的一项的一半。
//                avoidLabelOverlap: false,//是否启用防止标签重叠策略，默认开启，在标签拥挤重叠的情况下会挪动各个标签的位置，防止标签间的重叠。
//                startAngle: 20,//起始角度，支持范围[0, 360]。
//                itemStyle: {//图形样式，有 normal 和 emphasis 两个状态
//                    normal: {
//                        label: {
//                            show: false
//                        },
//                        labelLine: {
//                            show: false
//                        },
//                        borderWidth: 5,//描边线宽
//                        borderColor: '#ffffff',
//                    }
//                },
//                // 图形样式
//                label: {
//                    normal: {
//                        show: false,
//                        position: 'center'
//                    },
//                    emphasis: {//是否显示标签
//                        show: false,
//                        formatter: function (param) {
//                            return param.name;
//                        },
//                        textStyle: {
//                            fontSize: '8',
////                            fontWeight: 'bold'
//                        }
//                    }
//                },
//                labelLine: {
//                    normal: {
//                        show: true
//                    }
//                },
//                data: [{ //数据控制显示几个颜色及所占比大小,name不能重复
//                    value: media_income_occupy[0],
//                    name:  media_income_name[0]
//                },{
//                    value: media_income_occupy[1],
//                    name:  media_income_name[1]
//                },{
//                    value: media_income_occupy[2],
//                    name:  media_income_name[2]
//                },{
//                    value: media_income_occupy[3],
//                    name:  media_income_name[3]
//                },{
//                    value: media_income_occupy[4],
//                    name:  media_income_name[4]
//                }]
//            }]
//        };
//        myChart_pie_media.clear();
//        myChart_pie_media.setOption(option_pie_media);
//    }

    //广告位收入占比
//    function slotincomeoccupyAPI_fun(begin, end, top) {
//        var client_income_name = new Array();
//        var client_income_occupy = new Array();
//        var client_income_occupy_true = new Array();
//        slotincomeoccupyAPI(begin, end, top, slotincomeoccupyAPIonSuccess);
//        function slotincomeoccupyAPIonSuccess(result) {
//            var req = JSON.parse(result);
//            if (req.status == 1) {
//                if(req.data.length <= 1)
//                {
//                    $('#ad_income_id').hide();
//                }
//                else {
//                    $('#ad_income_id').show();
//                }
//                if (req.data.length == 0) {
//                    client_income_name = [];
//                    client_income_occupy = [];
//                }
//                for (var w = 0; w < req.data.length; w++) {
//                    if(req.data[w].occupy == 0){  //如果数据为0 则图例上不显示
//                        continue;
//                    }
//                    client_income_name[w] = req.data[w].slot_name;
//                    client_income_occupy_true[w] = req.data[w].occupy;
//                    if(req.data[w].occupy < 1)
//                    {
//                        client_income_occupy[w] = ++req.data[w].occupy;
//                    }
//                    else {
//                        client_income_occupy[w] = req.data[w].occupy;
//                    }
//                }
//            }
//        }
//
//        client_income_fun(client_income_name, client_income_occupy,client_income_occupy_true);
//    }
//    function client_income_fun(client_income_name, client_income_occupy,client_income_occupy_true) {
//
//        myChart_pie_ad = echarts.init(document.getElementById('ad_income'));
//        option_pie_ad = {
//            backgroundColor: '#ffffff',
//            color: ['#FDB225', '#16A59C', '#0078e6', '#a75adc', '#33cbcc'],
//            tooltip: {
//                show: true,//鼠标滑过图形时显示具体信息
//                formatter:function (Params){
//                    var new_str = Params.data.name + ' : ' + client_income_occupy_true[Params.dataIndex] + '%';
//                    return new_str;
//                }
//            },
//            legend: {     // 饼图外的各项数据item
//                orient: 'vertical',//图例列表的布局朝向。
//                left: '25%',//图例组件离容器左侧的距离。
//                top: '65%',
//                itemWidth: 8,//图例标记的图形宽度。
//                itemHeight: 8,
//                itemGap:8,
//                data: client_income_name,
//                formatter:function (client_income_name) { //名称过长时，截取八个，剩下显示省略，鼠标悬浮时显示全称
//                    var newParamsName = "";
//                    newParamsName = cutstrbyChar(client_income_name , 22);
//                    return newParamsName;
//                },
//                tooltip: {
//                    show: true
//                }
////                    ['媒体名称','媒体名称123', '媒体名称234', '媒体名称5555', '媒体名称5566'],
//            },
//            series: [{    // 饼图的属性配置
//                name: '',
//                type: 'pie',
//                center: ['50%', '35%'],//饼图的中心（圆心）坐标，数组的第一项是横坐标，第二项是纵坐标。
//                radius: ['40%', '60%'],//饼图的半径，数组的第一项是内半径，第二项是外半径。支持设置成百分比，相对于容器高宽中较小的一项的一半。
//                avoidLabelOverlap: false,//是否启用防止标签重叠策略，默认开启，在标签拥挤重叠的情况下会挪动各个标签的位置，防止标签间的重叠。
//                startAngle: 20,//起始角度，支持范围[0, 360]。
//                itemStyle: {//图形样式，有 normal 和 emphasis 两个状态
//                    normal: {
//                        label: {
//                            show: false
//                        },
//                        labelLine: {
//                            show: false
//                        },
//                        borderWidth: 5,//描边线宽
//                        borderColor: '#ffffff',
//                    }
//                },
//                // 图形样式
//                label: {
//                    normal: {
//                        show: false,
//                        position: 'center'
//                    },
//                    emphasis: {//是否显示标签
//                        show: false,
//                        formatter: function (param) {
//                            return param.name;
//                        },
//                        textStyle: {
//                            fontSize: '8',
////                            fontWeight: 'normal'
//                        }
//                    }
//                },
//                labelLine: {
//                    normal: {
//                        show: true
//                    }
//                },
//                data: [{ //数据控制显示几个颜色及所占比大小,name不能重复
//                    value: client_income_occupy[0],
//                    name:  client_income_name[0]
//                }, {
//                    value: client_income_occupy[1],
//                    name:  client_income_name[1]
//                },
//                {
//                    value: client_income_occupy[2],
//                    name:  client_income_name[2]
//                },{
//                    value: client_income_occupy[3],
//                    name:  client_income_name[3]
//                },{
//                    value: client_income_occupy[4],
//                    name:  client_income_name[4]
//                }]
//            }]
//        };
//        myChart_pie_ad.clear();
//        myChart_pie_ad.setOption(option_pie_ad);
//    }

    //控制label标签显示字数，换行
    function setLabel(params, num) {
        if (!params) {
            return null;
        }
        var newParamsName = "";// 最终拼接成的字符串
        var paramsNameNumber = params.length;// 实际标签的个数
        var provideNumber = num;// 每行能显示的字的个数
        var rowNumber = Math.ceil(paramsNameNumber / provideNumber);// 换行的话，需要显示几行，向上取整
        /**
         * 判断标签的个数是否大于规定的个数， 如果大于，则进行换行处理 如果不大于，即等于或小于，就返回原标签
         */
        // 条件等同于rowNumber>1
        if (paramsNameNumber > provideNumber) {
            /** 循环每一行,p表示行 */
            for (var p = 0; p < rowNumber; p++) {
                var tempStr = "";// 表示每一次截取的字符串
                var start = p * provideNumber;// 开始截取的位置
                var end = start + provideNumber;// 结束截取的位置
                // 此处特殊处理最后一行的索引值
                if (p == rowNumber - 1) {
                    // 最后一次不换行
                    tempStr = params.substring(start, paramsNameNumber);
                } else {
                    // 每一次拼接字符串并换行
                    tempStr = params.substring(start, end) + "\n";
                }
                newParamsName += tempStr;// 最终拼成的字符串
            }
        } else {
            // 将旧标签的值赋给新标签
            newParamsName = params;
        }
        //将最终的字符串返回
        return newParamsName;
    }

</script>
<!--表格-->
<script type="text/javascript">
    $(document).ready(function () {
//   媒体收入表格
        $('#table_media').bootstrapTable({
            url: '/dashboard/mediaincomereport',
            queryParams: function (params) {
                params.begin = nowTime.start;
                params.end = nowTime.end;
                params.top = 5;
                return params;
            },
            height: undefined,//定义表格的高度
            showColumns: false,//是否显示 内容列下拉框
            sortName: 'income',//定义排序列,通过url方式获取数据填写字段名，否则填写下标
            sortOrder: 'desc',
            striped: true,//设置为 true 会有隔行变色效果
            columns: [{
                field: 'media_name',
                title: '媒体名称',
                formatter: function (value, row, index) {
                    return '<span class="cutValue">' + cutstrbyChar(value, 16) + '</span>';
                },
                events: {
                    'mouseenter .cutValue': function (e, value, row, index) {
                        if (getCharLength(value) > 16) {
                            layer.tips(value, e.target, {
                                tips: [1, '#353538'],
                                area: ['auto', 'auto']
                            });
                        }
                    },
                    'mouseleave .cutValue': function (e, value, row, index) {
                        if (getCharLength(value) > 16) {
                            layer.closeAll()
                        }
                    }
                }
            }, {
                field: 'income',
                title: '收入(元)',
                sortable: true,
                formatter:function (params) {
                    return splitK(params);
                }
            }, {
                field: 'imp',
                title: '曝光量',
                sortable: true,
                formatter:function (params) {
                    return splitK(params);
                }
            }, {
                field: 'clk',
                title: '点击量',
                sortable: true,
                formatter:function (params) {
                    return splitK(params);
                }

            }, {
                field: 'ctr',
                title: '点击率',
                sortable: true,
                formatter:function (params) {
//                    console.log('params',params);
                    return params + '%';
                }
            }, {
                field: 'ecpm',
                title: 'eCPM(元)',
                sortable: true,
                formatter:function (params) {
                    return splitK(params);
                }

            }, {
                field: 'ecpc',
                title: 'eCPC(元)',
                sortable: true,
                formatter:function (params) {
                    return splitK(params);
                }

            }]
        });
//广告位收入表格
        $('#table_client').bootstrapTable({
            url: '/dashboard/slotincomereport',
            queryParams: function (params) {
                params.begin = nowTime.start;
                params.end = nowTime.end;
                params.top = 5;
                return params;
            },
            height: undefined,//定义表格的高度
            showColumns: false,//是否显示 内容列下拉框
            sortName: 'income',//定义排序列,通过url方式获取数据填写字段名，否则填写下标
            sortOrder: 'desc',
            striped: true,//设置为 true 会有隔行变色效果
            columns: [{
                field: 'slot_name',
                title: '广告位名称',
                formatter: function (value, row, index) {
                    return '<span class="cutValue">' + cutstrbyChar(value, 16) + '</span>';
                },
                events: {
                    'mouseenter .cutValue': function (e, value, row, index) {
                        if (getCharLength(value) > 16) {
                            layer.tips(value, e.target, {
                                tips: [1, '#353538'],
                                area: ['auto', 'auto']
                            });
                        }
                    },
                    'mouseleave .cutValue': function (e, value, row, index) {
                        if (getCharLength(value) > 16) {
                            layer.closeAll()
                        }
                    }
                }
            }, {
                field: 'income',
                title: '收入(元)',
                sortable: true,
                formatter:function (params) {
                    return splitK(params);
                }
            }, {
                field: 'imp',
                title: '曝光量',
                sortable: true,
                formatter:function (params) {
                    return splitK(params);
                }
            }, {
                field: 'clk',
                title: '点击量',
                sortable: true,
                formatter:function (params) {
                    return splitK(params);
                }

            }, {
                field: 'ctr',
                title: '点击率',
                sortable: true,
                formatter:function (params) {
                    return params + '%';
                }

            }, {
                field: 'ecpm',
                title: 'eCPM(元)',
                sortable: true,
                formatter:function (params) {
                    return splitK(params);
                }
            }, {
                field: 'ecpc',
                title: 'eCPC(元)',
                sortable: true,
                formatter:function (params) {
                    return splitK(params);
                }
            }]
        });

        var top = 5;
        basetemplateincometopAPI_fun(nowTime.start, nowTime.end, top);
        basetemplatectrAPI_fun(nowTime.start, nowTime.end, top);
//        mediaincomeoccupyAPI_fun(nowTime.start, nowTime.end, top);
//        slotincomeoccupyAPI_fun(nowTime.start, nowTime.end, top);
        refresh_echarts();
    });
//千位符处理函数，带小数的也可以处理
    function splitK(num) {
        var decimal = String(num).split('.')[1] || '';//小数部分
        var tempArr = [];
        var revNumArr = String(num).split('.')[0].split("").reverse();//倒序
        for (i in revNumArr){
            tempArr.push(revNumArr[i]);
            if((i+1)%3 === 0 && i != revNumArr.length-1){
                tempArr.push(',');
            }
        }
        var zs = tempArr.reverse().join('');//整数部分
        return decimal?zs+'.'+decimal:zs;
    }

    // 自适应浏览器大小
    function refresh_echarts() {
        window.onresize = function () {
            myChart.resize();
            myChart_template_income.resize();
            myChart_template_ctr.resize();
//            myChart_pie_media.resize();
//            myChart_pie_ad.resize();
        }
    }

</script>

<script type="text/javascript" src="/js/bootstrap-table.js?v=20170427"></script>
<!--<script type="text/javascript" src="/js/bootstrap-table-cookie.js"></script>-->
<!--<script type="text/javascript" src="/js/bootstrap-editable.js"></script>-->
<!--<script type="text/javascript" src="/js/bootstrap-table-editable.js"></script>-->
<!--<script type="text/javascript" src="/js/bootstrap-table-filter-control.js"></script>-->
<script type="text/javascript" src="/js/bootstrap-table-zh-CN.js"></script>
<!--<script type="text/javascript" src="/js/bootstrap-validation.js"></script>-->

<!--<script type="text/javascript" src="/js/bootstrap-switch.js"></script>-->
<script type="text/javascript" src="/js/layer/layer.js"></script>
<!--<script type="text/javascript" src="/js/dl-custom-filter.js"></script>-->
<?php
//echo $this->renderFile('@app/views/layouts/listAd.phtml');
//?>